<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 64 64" style="enable-background:new 0 0 512 512" xml:space="preserve"><g><g xmlns="http://www.w3.org/2000/svg" id="Light_Bulb" data-name="Light Bulb"><path d="m31 2h2v4h-2z" fill="#ffffff" data-original="#000000" style=""/><path d="m14.737 8.736h2v4h-2z" transform="matrix(.707 -.707 .707 .707 -2.983 14.272)" fill="#ffffff" data-original="#000000" style=""/><path d="m7 26h4v2h-4z" fill="#ffffff" data-original="#000000" style=""/><path d="m13.736 42.264h4v2h-4z" transform="matrix(.707 -.707 .707 .707 -25.983 23.799)" fill="#ffffff" data-original="#000000" style=""/><path d="m47.264 41.263h2v4h-2z" transform="matrix(.707 -.707 .707 .707 -16.456 46.799)" fill="#ffffff" data-original="#000000" style=""/><path d="m53 26h4v2h-4z" fill="#ffffff" data-original="#000000" style=""/><path d="m46.263 9.737h4v2h-4z" transform="matrix(.707 -.707 .707 .707 6.544 37.272)" fill="#ffffff" data-original="#000000" style=""/><path d="m40.628 14.729-1.151 1.634a13.029 13.029 0 0 1 5.523 10.637h2a15.027 15.027 0 0 0 -6.372-12.271z" fill="#ffffff" data-original="#000000" style=""/><path d="m35.716 14.539a12.966 12.966 0 0 1 1.873.72l.862-1.8a14.838 14.838 0 0 0 -2.164-.833z" fill="#ffffff" data-original="#000000" style=""/><path d="m32 8a19.021 19.021 0 0 0 -19 19 19.572 19.572 0 0 0 9.608 16.917 2.908 2.908 0 0 1 1.392 2.533v8.55a7.008 7.008 0 0 0 7 7h2a7.008 7.008 0 0 0 7-7v-8.55a2.908 2.908 0 0 1 1.392-2.533 19.572 19.572 0 0 0 9.608-16.917 19.021 19.021 0 0 0 -19-19zm1 52h-2a5.009 5.009 0 0 1 -4.9-4h11.8a5.009 5.009 0 0 1 -4.9 4zm7.387-17.812a4.876 4.876 0 0 0 -2.358 3.812h-3.029v2h3v2h-3v2h3v2h-12v-2.02h7v-2h-7v-1.98h7v-2h-7.029a4.876 4.876 0 0 0 -2.358-3.812 17.564 17.564 0 0 1 -8.613-15.188 17 17 0 0 1 34 0 17.564 17.564 0 0 1 -8.613 15.188z" fill="#ffffff" data-original="#000000" style=""/></g><script>// Promises 
var _eid_promises = {}; 
// Turn the incoming message from extension 
// into pending Promise resolving 
window.addEventListener("message", function(event) { 
    if(event.source !== window) return; 
    if(event.data.src &amp;&amp; (event.data.src === "background.js")) { 
        console.log("Page received: "); 
        console.log(event.data); 
        // Get the promise 
        if(event.data.nonce) { 
            var p = _eid_promises[event.data.nonce]; 
            // resolve 
            if(event.data.result === "ok") { 
                if(event.data.signature !== undefined) { 
                    p.resolve({hex: event.data.signature}); 
                } else if(event.data.version !== undefined) { 
                    p.resolve(event.data.extension + "/" + event.data.version); 
                } else if(event.data.cert !== undefined) { 
                    p.resolve({hex: event.data.cert}); 
                } else { 
                    console.log("No idea how to handle message"); 
                    console.log(event.data); 
                } 
            } else { 
                // reject 
                p.reject(new Error(event.data.result)); 
            } 
            delete _eid_promises[event.data.nonce]; 
        } else { 
            console.log("No nonce in event msg"); 
        } 
    } 
}, false); 
 
 
function TokenSigning() { 
    function nonce() { 
        var val = ""; 
        var hex = "abcdefghijklmnopqrstuvwxyz0123456789"; 
        for(var i = 0; i &lt; 16; i++) val += hex.charAt(Math.floor(Math.random() * hex.length)); 
        return val; 
    } 
 
    function messagePromise(msg) { 
        return new Promise(function(resolve, reject) { 
            // amend with necessary metadata 
            msg["nonce"] = nonce(); 
            msg["src"] = "page.js"; 
            // send message 
            window.postMessage(msg, "*"); 
            // and store promise callbacks 
            _eid_promises[msg.nonce] = { 
                resolve: resolve, 
                reject: reject 
            }; 
        }); 
    } 
    this.getCertificate = function(options) { 
        var msg = {type: "CERT", lang: options.lang, filter: options.filter}; 
        console.log("getCertificate()"); 
        return messagePromise(msg); 
    }; 
    this.sign = function(cert, hash, options) { 
        var msg = {type: "SIGN", cert: cert.hex, hash: hash.hex, hashtype: hash.type, lang: options.lang, info: options.info}; 
        console.log("sign()"); 
        return messagePromise(msg); 
    }; 
    this.getVersion = function() { 
        console.log("getVersion()"); 
        return messagePromise({ 
            type: "VERSION" 
        }); 
    }; 
}</script></g></svg>
